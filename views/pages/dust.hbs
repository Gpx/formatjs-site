{{setTitle "Dust"}}
{{setDescription "Documentation and examples of Dust integration."}}

<section class="head">
    {{> nav}}
</section>

<section class="intro">
    <div class="l-wrap">
        <h1 class="intro-package">
            <span class="intro-package-name">
                Dust Intl
            </span>
            <img class="intro-package-mark" alt="Dust logo" src="/img/dust.svg">
        </h1>

        <h2 class="tagline">{{package.description}}</h2>

        {{> integrations/package-meta}}
    </div>

    {{> integrations/package-install}}
</section>

<section class="main docs l-wrap">

    <p>
        This library provides a set of helpers to internationalize your <a href="http://linkedin.github.io/dustjs/">Dust</a> templates:
    </p>

    <h2>Features</h2>
    {{> integrations/features}}


    <h2>Helpers</h2>

    <ul>
        <li>
            <a href="#formatDate"><code>{@formatDate}</code></a> formats a date value
        </li>
        <li>
            <a href="#formatTime"><code>{@formatTime}</code></a> formats a date value with time formats
        </li>
        <li>
            <a href="#formatRelative"><code>{@formatRelative}</code></a> formats a date relative to now; e.g. "3 hours ago"
        </li>
        <li>
            <a href="#formatNumber"><code>{@formatNumber}</code></a> formats a number value
        </li>
        <li>
            <a href="#formatMessage"><code>{@formatMessage}</code></a> formats a translated string message
        </li>
        <li>
            <a href="#intl"><code>{@intl}</code></a> creates an <code>intl</code> data scope in a block
        </li>
    </ul>


    <h2>How It Works</h2>

    <h3>Create a Dust Template Using a Helper</h3>

{{#code "dust"}}
<p>{@formatNumber val=price style="currency" currency="USD"/}</p>
{{/code}}

    <h3>Render the Template</h3>

{{#code "js"}}
var context = {
    intl: {
        locales: 'en-US'
    },
    price: 1000
};

dust.renderSource(template, context, function(error, html) {
    // Rendered html available here.
});
{{/code}}

    <div class="example">
        <div class="example-output">
            <h4 class="example-output-heading">Rendered</h4>
            <div class="dust-output">
                <p>$1,000.00</p>
            </div>
        </div>
    </div>


    <h2 id="usage">Usage</h2>

    <h3 id="install-browser">Browser</h3>

    <h4>1. Load the Scripts onto the Page</h4>

    <p>
        First, load Dust and Dust Intl onto the page:
    </p>

{{#code "html"}}
<script src="dustjs-linkedin/dist/dust-full.min.js"></script>
<script src="{{package.dist.main}}"></script>
{{/code}}

    {{> integrations/load-locale-data-browser}}
    {{> integrations/note-intl-browser}}

    <h4>2. Register the Helpers</h4>

{{#code "js"}}
DustIntl.registerWith(dust);
{{/code}}

    <h3 id="install-node">Node/CommonJS</h3>

    <h4>1. Require the Module</h4>

{{#code "js"}}
var dust     = require('dustjs-linkedin');
var DustIntl = require('dust-intl');
{{/code}}

    {{> integrations/load-locale-data-node}}
    {{> integrations/note-intl-node}}

    <h4>2. Register the Helpers</h4>

{{#code "js"}}
DustIntl.registerWith(dust);
{{/code}}


    <h2 id="formatNumber">Format Numbers with Separators</h2>

    <p>
        The <code>{@formatNumber}</code> helper is used to represent a number in a way appropriate for the current locale. It formats numbers using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat">Intl.NumberFormat</a> and returns the formatted string value.
    </p>

    {{~> example examples.number}}

    <h3>Using Named Number Formats</h3>

    <p>
        Specifying formatting options (e.g.: <code>style="currency" currency="USD"</code>) in every call to <code>{@formatNumber}</code> in your templates can become a problem in large code bases, and isn't DRY. Instead, you can use <a href="#custom-formats"><code>context.intl.formats.number</code></a> to define named number formats.
    </p>

    {{~> example examples.numberCustom}}

    <p>
        In the example above, <code>formatName="USD"</code> and <code>formatName="percentage"</code> references the names of number formats defined in <code>context.intl.formats.number</code>, which is used when rendering the template. Check the <strong>RENDER</strong> tab to see the details.
    </p>

    {{> integrations/see-custom-formats}}


    <h2 id="formatDate">Format Dates and Times Correctly</h2>

    <p>
        The <code>{@formatDate}</code> helper is used to represent a date in a way appropriate for the current locale. It formats dates using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat">Intl.DateTimeFormat</a> and returns the formatted string value.
    </p>

    {{~> example examples.date}}

    <p>
        Specifying format options (e.g.: <code>day="numeric" month="long" year="numeric"</code>) in every call to <code>{@formatDate}</code> in your templates can become a problem in large code bases, and isn't DRY. Instead, you can use <a href="#custom-formats"><code>context.intl.formats.date</code></a> to define named date formats.
    </p>

    {{~> example examples.dateCustom}}

    <p>
        In the example above, <code>formatName="short"</code> references the name of a date format defined in <code>context.intl.formats.date</code>. Check the <strong>RENDER</strong> tab to see the details.
    </p>

    {{> integrations/see-custom-formats}}

    <h3>Using Named Time Formats</h3>

    <p id="formatTime">
        The <code>{@formatTime}</code> is just like the <code>{@formatDate}</code> helper, except it will reference any named formats from <code>context.intl.formats.time</code>.
    </p>


    <h2 id="formatRelative">Format Dates Relative To "now"</h2>

    <p>
        The <code>{@formatRelative}</code> helper is used to represent a relative time in a way appropriate for the current locale. It formats the relative time following the rules from <a href="http://cldr.unicode.org/">Unicode CLDR</a> and returns the formatted string value.
    </p>

    {{~> example examples.relative}}

    <h3>Using Specific Relative Units</h3>

    <p>
        By default, the relative time is formatted using the best fit unit of time. However, you can explicitly set the <code>units</code> option one of the following values:<br> <code>"second"</code>, <code>"minute"</code>, <code>"hour"</code>, <code>"day"</code>, <code>"month"</code> or <code>"year"</code>.
    </p>

    {{~> example examples.relativeUnits}}

    <h3>Using Specific Relative Styles</h3>

    <p>
        The <code>style</code> option provides another level of customization. By default, the relative time is computed with a <code>"best fit"</code> style, which means, for example, that instead of "1 day ago", it will display "yesterday", or "in 1 year" will be "next year", etc. The other <code>style</code> is <code>"numeric"</code>, in which the output will <em>always</em> contain a number.
    </p>

    {{~> example examples.relativeStyle}}

    <h3>Using Named Relative Formats</h3>

    <p>
        Specifying format options (e.g.: <code>style="numeric"</code>) in every call to <code>{@formatRelative}</code> in your templates can become a problem in large code bases, and isn't DRY. Instead, you can use <a href="#custom-formats"><code>context.intl.formats.relative</code></a> to define named relative formats.
    </p>

    {{~> example examples.relativeCustom}}

    <p>
        In the example above, <code>formatName="hours"</code> references the name of a relative format defined in <code>context.intl.formats.relative</code>. Check the <strong>RENDER</strong> tab to see the details.
    </p>

    {{> integrations/see-custom-formats}}


    <h2 id="formatMessage">Format Labels in the Template</h2>

    <p>
        When internationalizing Dust templates, you will need a way to localize your UI strings, including any logic pieces like pluralization rules for all the languages you wish to support. These strings should be externalized from your Dust templates so that the same template can be used for all languages.
    </p>

    <p>
        The <code>{@formatMessage}</code> helper formats a translated message written in the <a href="http://userguide.icu-project.org/formatparse/messages">ICU Message</a> syntax, which is used by professional translators. The message format supports placeholders, plus choosing different strings based on pluralization, gender, or other criteria.
    </p>

    {{> integrations/see-guide}}

    {{~> example examples.message}}

    <p>
        In the example above, <code>_key</code> is used to lookup the localized string message by path from <code>context.intl.messages</code> that is passed into the template. Check the <strong>RENDER</strong> tab to see the details.
    </p>

    <p>
        Additionally, you can leverage <a href="#custom-formats">custom formats</a> as described below, to specify a set of named format options to use in your messages, e.g: <code>{someNum, number, USD}</code> and <code>{someDate, date, short}</code> or <code>{someTime, time, long}</code>.
    </p>


    <h2 id="intl">Create Intl Lambda</h2>

    <p>
        The <code>{@intl}</code> block helper can be used to create a new <code>intl</code> data scope by updating the <code>intl</code> context data supplied to Dust within the block. This is useful when you need to render part of the page in a particular locale.
    </p>

    {{~> example examples.intl}}

    <p>
        You can use this approach for <code>formats</code> and <code>messages</code>, which are normally passed via <code>context.intl</code> object when rendering the template. Check the <strong>RENDER</strong> tab to see the details.
    </p>


    <h2 id="custom-formats">Define Your Own Custom Formats</h2>

    <p>
        Dust Intl allows you to define named formats that you can be used throughout your entire application or within a template and its partials. These named formats can be specified for <code>date</code>, <code>time</code>, <code>number</code> and <code>relative</code> format types. The following example illustrates how these custom named formats work.
    </p>

    {{~> example examples.custom}}

    <p>
        In the example above, <code>formatName="USD"</code>, <code>formatName="short"</code>, <code>formatName="hhmm"</code>, and <code>formatName="hours"</code> all reference the named custom formats defined in <code>context.intl.formats</code>. Check the <strong>RENDER</strong> tab to see the details.
    </p>

    <p class="note">
        <b>Note:</b> You can provide the <code>context.intl.formats</code> object when rendering the top-level template, and <code>context.intl.formats</code> will be propagated to any partial or helper.
    </p>
</section>
